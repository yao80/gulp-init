@charset "utf-8";

//////////////////////////////////////////////////////////////////////////
//
//  Modules: mixins
//
//////////////////////////////////////////////////////////////////////////

//  Grid-System
@mixin rows($col:12, $gutter: 3%, $class:'row') {
  $grid: (100% - (($col - 1) * $gutter)) / $col;
  @for $i from 1 through $col {
    $num: $col - $i + 1;
    $width: ($grid * $num) + ($gutter * ($num - 1));
    .#{$class} .col-#{$num} {
      width: $width;
    }
  }
  .#{$class} [class*='col-'] {
    margin-left: $gutter;
    float: left;
  }
  .#{$class} [class*='col-']:first-child {
    margin-left: 0;
  }
  .#{$class}:after {
    content: "";
    display: table;
    clear: both;
  }
}


// Font-Size
@mixin font-size($size: 24, $base: 16) {
  font-size: $size + px;
  font-size: ($size / $base) * 1rem;
}


// font-face
@mixin font-face($font,$style,$weight) {
  @font-face {
    font-family: $font;
    src: url('/font/' + $font + '.eot');
    src: url('/font/' + $font + '.eot?#iefix') format('embedded-opentype'),
    url('/font/' + $font + '.woff') format('woff'),
    url('/font/' + $font + '.ttf') format('truetype'),
    url('/font/' + $font + '.svg#' + $font + '') format('svg');
    font-style: $style;
    font-weight: $weight;
  }
}


//  Position
@mixin abs( $point, $pos1:0, $pos2:0 ) {
  position: absolute;
  @if $point == lt {
    left: $pos1;
    top: $pos2;
  }
  @else if $point == rt {
    right: $pos1;
    top: $pos2;
  }
  @else if $point == lb {
    left: $pos1;
    bottom: $pos2;
  }
  @else if $point == rb {
    right: $pos1;
    bottom: $pos2;
  }
}


// Arrow
@mixin arrow($direction: right, $v: 10, $h: 10, $color: #000){
  $set: left;
  width: 0;
  height: 0;
  @if $direction == left{
    border-top: $v solid transparent;
    border-right: $h solid $color;
    border-bottom: $v solid transparent;
    border-left: $h solid transparent;
  }@elseif $direction == top{
    border-top: $v solid transparent;
    border-right: $h solid transparent;
    border-bottom: $v solid $color;
    border-left: $h solid transparent;
  }@elseif $direction == bottom{
    border-top: $v solid $color;
    border-right: $h solid transparent;
    border-bottom: $v solid transparent;
    border-left: $h solid transparent;
  }@elseif $direction == right{
    border-top: $v solid transparent;
    border-right: $h solid transparent;
    border-bottom: $v solid transparent;
    border-left: $h solid $color;
  }
}


// Box-shadow
@mixin box-shadow( $h: 10px , $v: 10px , $b: 0px , $s: 0px , $c: #000 ) {
  -webkit-box-shadow: $h $v $b $s $c;
  -moz-box-shadow: $h $v $b $s $c;
  -o-box-shadow: $h $v $b $s $c;
  -ms-box-shadow: $h $v $b $s $c;
  box-shadow: $h $v $b $s $c;
}


// Gradient
@mixin gradient($start-color, $end-color, $orientation){
  background: $start-color;
  @if $orientation == vertical{
    // vertical
    background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: -ms-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
  }
  @else if $orientation == horizontal{
    // horizontal
    background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  }@else{
    // radial
    background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  }
}


// Opacity
@mixin opacity( $opacity ) {
  opacity: $opacity;
  $opacityIE: $opacity * 100;
  filter: alpha(opacity=$opacityIE);
}


// Vertical-align-middle
@mixin vertical-align-middle {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}


// Text-Hidden
@mixin text-hidden{
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}


// Clearfix
@mixin clearfix {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}


//  MediaQuery
@mixin mqPC {
  @media screen and (min-width: $breakPointPC) {
    @content;
  }
}
@mixin mqTab {
  @media screen and (min-width: $breakPointTablet) and (max-width: $breakPointPC) {
    @content;
  }
}
@mixin mqSP {
  @media screen and (max-width: $breakPointSP) {
    @content;
  }
}


//  Animation Keyframe
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}


//  CSS Sprite for Retina
@mixin r-sprite-width($sprite) {
  width: nth($sprite, 5)/2;
}
@mixin r-sprite-height($sprite) {
  height: nth($sprite, 6)/2;
}
@mixin r-sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3)/2;
  $sprite-offset-y: nth($sprite, 4)/2;
  background-position: $sprite-offset-x  $sprite-offset-y;
}
@mixin r-sprite-size($sprite) {
  background-size: nth($sprite, 7)/2 auto;
}
@mixin r-sprite($sprite) {
  display: block;
  text-indent: -9999px;
  @include sprite-image($sprite);
  @include r-sprite-position($sprite);
  @include r-sprite-width($sprite);
  @include r-sprite-height($sprite);
  @include r-sprite-size($sprite); 
}


//  Element / Modifier
@mixin e($name) {
  @at-root #{&}_#{$name} {
    @content;
  }
}
@mixin m($name) {
  @at-root #{&}-#{$name} {
    @content;
  }
}
